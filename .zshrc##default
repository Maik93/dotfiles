# export PATH=$HOME/bin:/usr/local/bin:$PATH
ZSH_DISABLE_COMPFIX=true

export ZSH="$HOME/.oh-my-zsh"
export LC_NUMERIC="en_GB.UTF-8"

# check if running inside a singularity container
IN_SINGULARITY=false
if [[ -n $SINGULARITY_CONTAINER ]]; then
  IN_SINGULARITY=true

  SING_NAME=${SINGULARITY_NAME%.sif}
  if [[ -f $SINGULARITY_CONTAINER ]]; then
    SINGMAN_PATH=`( cd "$(dirname "$SINGULARITY_CONTAINER")/.." && pwd -P )`
  else
    SINGMAN_PATH=/tmp
  fi

  HOST=${SING_NAME//_/-}
fi

# if [[ $TERM = 'xterm-kitty' ]]; then
export TERMCMD="kitty"
export EDITOR=nvim
alias vim='nvim'
# else
#   export TERMCMD="urxvt"
#     export EDITOR=vim
# fi

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display r.e.d. dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

if $IN_SINGULARITY; then

  # ZSH_THEME="af-magic"
  ZSH_THEME="afowler"

  # plugins=(git zsh-autosuggestions colored-man-pages)
  plugins=(git)

  HISTFILE="$SINGMAN_PATH/artifacts/$SING_NAME.zsh_history"

else # real system

  ZSH_THEME="afowler"

  plugins=(git zsh-autosuggestions docker colored-man-pages)

  # zoxide integration
  eval "$(zoxide init zsh)"

  # lazy loading ~/.local/autoloaded/* executables
  fpath=($fpath ~/.local/autoloaded)
  autoload conda
  autoload nvm

fi

# regenerate .zcompdump only if older than a day
autoload -Uz compinit
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
  compinit
else
  compinit -C
fi

source $ZSH/oh-my-zsh.sh

setopt hist_ignore_space # do not record commands that start with spaces
# now if you write ' unset HISTFILE' both this command and the history of the current terminal from now on will not be stored
alias incognito=' unset HISTFILE'

unsetopt share_history # disable history shared between open terminals

if [[ $TERM = 'xterm-kitty' ]]; then
  #bindkey '' kill-word
  bindkey '<C-Del>' backward-kill-word
else # tmux
  bindkey '[3^' kill-word
  bindkey '[33~' backward-kill-word
fi

if $IN_SINGULARITY; then

  ROS_RC="$SINGMAN_PATH/artifacts/$SING_NAME.rosrc"
  [[ -f $ROS_RC ]] && source $ROS_RC

  alias catbuild="cd ${current_ros_ws} && catkin build && cd - > /dev/null"
  alias catmake="cd ${current_ros_ws} && catkin_make && cd - > /dev/null"
  alias ros-cd="cd ${current_ros_ws}"

  alias rqt-graph='rosrun rqt_graph rqt_graph &' # show links between published and subscribed topics
  alias rqt-plot='rosrun rqt_plot rqt_plot &' # plot published topics
  alias rqt-console='rosrun rqt_console rqt_console &' # debug GUI
  # alias ros-logger-level='rosrun rqt_logger_level rqt_logger_level &' # let change log level shown in ros-console
  #alias ros-call='rosservice call'
  alias rosbag-all="mkdir -p $SINGMAN_PATH/rosbags && cd $SINGMAN_PATH/rosbags && rosbag record -a"
  rosservice-type() { rosservice type $1 | rossrv show; }
  rostopic-type() { rostopic type $1 | rosmsg show; }
  alias rqt-tf-tree='rosrun rqt_tf_tree rqt_tf_tree' # GUI tree of transformations
  alias tf-echo='rosrun tf tf_echo' # echo transform between arg_1 and arg_2
  #alias xacro2urdf='rosrun xacro xacro'
  alias urdf2pdf='urdf_to_graphiz'
  #alias ros-connect-to-vm='export ROS_HOSTNAME=192.168.56.1 && export ROS_MASTER_URI=http://192.168.56.101:11311'

else # real system

  # systemctl autocompletition patch
  _systemctl_unit_state() {
    typeset -gA _sys_unit_state
    _sys_unit_state=( $(__systemctl list-unit-files "$PREFIX*" | awk '{print $1, $2}') )
  }

  # distcc compiling:
  # call 'pump ...' to ask Ryzen server for compilation for help! (e.g. 'pump make -j40')
  mkdir -p /tmp/distcc; export DISTCC_DIR=/tmp/distcc
  export DISTCC_HOSTS="10.30.5.9/30,cpp,lzo localhost/10"

  # local (user) bin folder and Rust (cargo bin folder)
  export PATH="/home/$USER/.local/bin:/home/flynn/.cargo/bin:$PATH"

  # Kitty aliases
  #alias ssh="kitty +kitten ssh"

  # Wayland fix for unsupported Qt applications
  QT_QPA_PLATFORM='wayland;xcb'

  # AWS
  complete -C '/usr/bin/aws_completer' aws
  eb_connect() {
    cd ~/sources/startup_projects/AWS/EB
    conda activate aws
    TERM=rxvt-256color eb ssh
    conda deactivate
  }

  # Archlinux aliases
  alias inst='sudo pacman -S'
  #alias search='sudo pacman -Ss'
  alias up='sudo pacman -Sy'
  alias upp='sudo pacman -Syu && paru -Syu'
  alias orphans='pacman -Qtd'
  alias instaur='paru -S'
  alias search='paru -Ss'
  alias remove='sudo pacman -Rs'
  alias clean='conda clean -a && sudo pacman -Scc && paru -Sc --aur'

  # Docker
  alias docker-remove-all-containers='docker rm $(docker container ls -a | grep -v "ros-" | awk "NR>1 {print $ 1}")'
  alias docker-remove-none-images='docker rmi $(docker images -qa -f 'dangling=true')'
  alias ros-docker='~/sources/docker_images/ros_noetic/go.sh'
  alias mfc-flash='~/sources/docker_images/image_builders/misc/mfc/fast_flash.sh'

  # Other host-only aliases
  alias d2u='dos2unix'
  alias cat='pygmentize -g -O style=monokai'
  alias svim='sudoedit'
  alias sync='sync && notify-send "sync command" completed!'
  #alias upp='snapper -c root create --command "sudo pacman -Syu && paru -Syu"'
  alias susp='systemctl suspend; exit 0'
  alias off='poweroff'
  alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

  # GPU integration
  alias nv-processes='optirun nvidia-smi'
  alias gpu='optirun' # to use Nvidia for the subsequent task (e.g. "gpu glxgears")
  alias gpu-hidden='optirun -b none env DISPLAY=:8' # to run something headless with Nvidia (no screen output, faster than anything)
  # alias check-gpu='cat /proc/acpi/bbswitch'
  alias check-gpu='optirun --status'
  # complete -cf gpu # auto-completition

  # CUDA
  export PATH="$PATH:/opt/cuda/bin"

  # Admin utility functions
  mount-as-user() {
    sudo mount -o rw,nosuid,nodev,relatime,uid=$(id -u),gid=$(id -g),fmask=0022,dmask=0022 $1 $2
  }
  update-arch-keys() {
    sudo pacman -Sy archlinux-keyring
    sudo pacman-key --populate archlinux
    sudo pacman-key --refresh-keys
  }

  # # MSI perkey-RGB
  # alias perkey-off="msi-perkeyrgb --model GS63 -c /home/flynn/sources/compiled_from_source/msi-perkeyrgb/colors/off"
  # alias perkey-on="msi-perkeyrgb --model GS63 -c /home/flynn/sources/compiled_from_source/msi-perkeyrgb/colors/light_blue"
  # alias perkey-magic="msi-perkeyrgb --model GS63 -p default"
  # alias perkey-aqua="msi-perkeyrgb --model GS63 -p aqua"

  # other useful aliases
  alias distcc-status='watch -c -n 2 -- distccmon-text 2'
  alias dndrop='dragon-drop --and-exit'
  alias qrencode='qrencode -t ANSIUTF8'
  alias update-completion='rm -f ~/.zcompdump* && compinit'
  alias wifi-menu='sudo wifi-menu -o' # automatically obfuscate passwords
  # alias jup-casadi='conda activate casadi && cd ~/sources/jupyter_projects && jupyter lab && cd - > /dev/null && conda deactivate'
  alias jup-cv='conda activate computer_vision && cd ~/sources/jupyter_projects && jupyter lab && cd - > /dev/null && conda deactivate'
  # alias apktool="docker run --rm -v `pwd`:/app theanam/apktool"
  alias transen='trans -brief -shell en:it'
  alias transit='trans -brief -shell it:en'

  alias aureport-k='sudo aureport -k | grep -v /usr/bin/auditctl'
  alias aureport-n='sudo aureport -n | grep -v /usr/bin/urxvt'

fi

# General purpose aliases
mkcd() { mkdir -p $1 && cd $1; }
alias cdtmp='cd `mktemp -d`'
alias suggest-pass='apg -s -a 1 -m 15 -M SNCL'
alias du='du -hs'
alias df='df -h | grep -v snap'
alias lsblk='lsblk | grep -v snap'
alias pacdiff='DIFFPROG="nvim -d" pacdiff -s'

# Git aliases
alias gadd='git add'
alias gcom='git commit'
alias gcomall='git commit -a'
alias glog='git log --oneline --graph --decorate --all'
alias gpush='git push --all && git push --tags'
alias gpull='git pull'
alias gstat='git status'
alias gfetch='git fetch --all -p -P'

# General purpose functions
7zc() {
  echo "==> Compressing '$1' in '$1.7z'"
  7z a -mmt=10 -mx=9 $1.7z $1
}
tarzst() {
  num_files=`find $1 | wc -w`
  echo "==> Compressing '$1' in '$1.tar.zst'"
  tar cv -I zstdmt -f $1.tar.zst $1 | pv -lep -s $num_files >/dev/null
}
paste-file() {
  echo "==> Pasting '$1' content over ix.io..."
  noglob cat $1 |& curl -F 'f:1=<-' ix.io
}

# Tmux: kill pane
killp () {
    if [ $# -eq 0 ]; then
        echo "The command killp() needs an argument, but none was provided!";
        return;
    else
        pes=$1;
    fi;
    for child in $(ps -o pid,ppid -ax | awk "{ if ( \$2 == $pes ) { print \$1 }}");
    do
        killp $child;
    done;
    kill -9 "$1" > /dev/null 2> /dev/null
}

# alias up-down="awk '{if(l1){print "Down: "($2-l1)/1024"kB/s","Up: "($10-l2)/1024"kB/s"} else{l1=$2; l2=$10;}}' \
#   <(grep eth0 /proc/net/dev) <(sleep 1; grep eth0 /proc/net/dev)"

# How to transfer docker images while compressing them on the fly:
# docker save <image> | bzip2 | ssh user@host 'bunzip2 | docker load'
