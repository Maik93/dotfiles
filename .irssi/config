servers = (
  {
    address = "chat.freenode.net";
    chatnet = "Freenode";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/freenode.pem";
    tls_verify = "yes";
    tls_capath = "/etc/ssl/certs";
  },
  {
    address = "irc.libera.chat";
    chatnet = "libera";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/libera.pem";
    tls_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = { Freenode = { type = "IRC"; }; libera = { type = "IRC"; }; };

channels = (
  { name = "#archlinux"; chatnet = "libera"; autojoin = "yes"; },
  { name = "#archlinux-aur"; chatnet = "libera"; autojoin = "yes"; },
  { name = "#archlinuxarm"; chatnet = "libera"; autojoin = "yes"; },
  { name = "#ros"; chatnet = "Freenode"; }
);

ignores = ( { level = "JOINS PARTS QUITS"; } );

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "%K {sb %G$Z}%K {sbaway $A} %g$topic%K";
    user = "{sb {sbnickmode $cumode}{sbmode $usermode}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "";

    #window_empty = "{sb %C{sbservertag $tag}}%n";
    window_empty = "{sb $winref/{sbservertag $tag}}";

    #prompt = "$winref%K/{prompt $[.15]itemname}";
    prompt = "";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb $0-}";
    more = "-- %Ymore below%n --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.

  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {

      # window, root
      type = "window";

      # top, bottom
      placement = "top";

      # number
      position = "1";

      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
      disabled = "yes";
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";

      # we want to be at the bottom always
      position = "1";
      visible = "active";
      items = { input = { }; };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "2";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
      disabled = "yes";
    };
    window_add = { items = { }; disabled = "yes"; };
    add = { disabled = "yes"; };
    delete = { disabled = "yes"; };
    prompt_empty = { position = "0"; disabled = "yes"; };
    asd = {
      position = "0";
      placement = "bottom";
      items = { };
      disabled = "yes";
    };
    topic_empty = { disabled = "yes"; };
    remove = { items = { }; disabled = "yes"; };
    channels = { items = { chanact = { }; }; disabled = "yes"; };
    statusbar = {
      items = {
        erotin = {
          items = { barstart = "asdasd--------------"; };
          priority = "100";
          alignment = "left";
          disabled = "no";
          placement = "bottom";
          position = "0";
        };
      };
    };
    "-before" = { disabled = "yes"; };
    aw1_0 = { position = "0"; disabled = "yes"; };
    empty = { placement = "bottom"; position = "0"; disabled = "yes"; };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Michael Mugnai";
    user_name = "Maik93";
    nick = "Maik93";
  };
  "fe-text" = {
    actlist_sort = "refnum";
    scroll_page_count = "2";
    scrollback_time = "7days";
  };
  "fe-common/core" = {
    theme = "weed";
    autolog = "yes";
    autolog_path = "~/.irssi/logs/$tag/$0/%Y/%m-%d.log";
    window_history = "yes";
    show_names_on_join = "no";
    show_nickmode_empty = "no";
  };
  "perl/core/scripts" = {
    awl_viewer = "no";
    awl_all_disable = "no";
    awl_block = "30";
    awl_height_adjust = "1";
    awl_hide_data = "0";
    awl_maxlines = "1";
    awl_placement = "bottom";
    awl_position = "0";
    awl_prefer_name = "yes";
    awl_sbar_maxlength = "yes";
    awl_sort = "refnum";
    awl_shared_sbar = "OFF";
    neat_colors = "X30rRX61X6CX3CyX1DcCBX3HX2AbMX3AX42X6M";
    trackbar_style = "%b";
    trackbar_string = "-";
    recdep_period = "3600";
    recdep_rejoin = "3600";
    recdep_nickperiod = "600";
  };
  "irc/core" = { skip_motd = "yes"; alternate_nick = "Maik93"; };
};

logs = { };
hilights = ( { text = "plasma"; nick = "yes"; word = "yes"; } );
